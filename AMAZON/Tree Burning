class Solution {
  public:
     

 Node* bfsTomapParent(Node* root,map<Node*,Node*>&mp,int target)
 {
     queue<Node*>q;
     q.push(root);
     Node* res;
     while(!q.empty())
     {
         Node* node=q.front();
         if(node->data==target) res=node;
         q.pop();
         if(node->left){
             mp[node->left]=node;
             q.push(node->left);
         }
         
         if(node->right){
             mp[node->right]=node;
             q.push(node->right);
         }
     }
     return res;
 }
 
 int findMaxdistance(map<Node*,Node*>&mp,Node* ans)
 {
     queue<Node*>q;
     q.push(ans);
     map<Node*,int>vis;
     vis[ans]=1;
     int maxi=0;
     while(!q.empty())
     {
         int sz=q.size();
         int fl=0;
         for(int i=0;i<sz;i++)
         {
             auto node=q.front();
             q.pop();
             if(node->left && !vis[node->left]){
                 fl=1;
                 vis[node->left]=1;
                 q.push(node->left);
             }
             if(node->right  && !vis[node->right]){
                 fl=1;
                 vis[node->right]=1;
                 q.push(node->right);
             }
             if(mp[node] && !vis[mp[node]]){
                 fl=1;
                 vis[mp[node]]=1;
                 q.push(mp[node]);
             }
         }
         if(fl) maxi++;
     }
     return maxi;
 }
 
   int minTime(Node* root, int target) 
   {
       // Your code goes here
       map<Node*,Node*>mp;
       Node* ans=bfsTomapParent(root,mp,target);
       int maxi=findMaxdistance(mp,ans);
       return maxi;
   }
};
